 
 Function is block of code performing a unit task.

Function has a name, return type and arguments.

Function is a way to achieve modularization.

Functions are Predefined and User-defined.

Predefined functions are declared in header files and defined in library files.




function declaration , definition , function call 



 1.function declaration 

Function Declaration is also known as Function prototype
Functions need to be declared before use (just like variables)
Functions can be declared locally or globally
Syntax:
ReturnType functionName(argumentList);
Function definition is a block of code


 2. function definition 
  writing a block of code with its return type and arguments is called function definition 

  these are of 4 types 
  1.takes nothing return nothilng 
  2.takes something return something
  3.take something return nothing 
  4. take nothing return something 

3. Function Call
This is when you use the function in your program.
At this point, the function executes and returns a result.


{arguments 

Formal Arguments
The variables written inside the function definition are called formal arguments.
They act like placeholders that receive values when the function is called.}



examples 


1. Takes Nothing, Returns Nothing

#include <iostream>
using namespace std;

void greet() {   // takes nothing, returns nothing
    cout << "Hello Rohit bhai! ðŸ‘‹" << endl;
}

int main() {
    greet();   // function call
    return 0;
}




2. Takes Something, Returns Something

#include <iostream>
using namespace std;

int square(int n) {   // takes something, returns something
    return n * n;
}

int main() {
    int num = 5;
    int result = square(num);   // function call
    cout << "Square of " << num << " is " << result << endl;
    return 0;
}


3. Takes Something, Returns Nothing

#include <iostream>
using namespace std;

void printSum(int a, int b) {   // takes something, returns nothing
    cout << "Sum is: " << a + b << endl;
}

int main() {
    printSum(7, 3);   // function call
    return 0;
}






4. Takes Nothing, Returns Something


#include <iostream>
using namespace std;

int getRandomNumber() {   // takes nothing, returns something
    return 42;  // just an example value
}

int main() {
    int num = getRandomNumber();   // function call
    cout << "Random number is: " << num << endl;
    return 0;
}

   Inline function ..... 


 Definition
An inline function is a function in which the compiler replaces the function call with the actual function code, instead of performing a normal function call.

Why use it?

To reduce function call overhead (time taken to jump to the function and return back).

Useful for small & frequently used functions.

How to declare?
Use the keyword inline before the function definition:

inline return_type function_name(parameters) {
    // function body
}


When to use?

For short functions (like getters, setters, mathematical calculations).

Functions used frequently in the program.

When NOT to use?

For large/complex functions â†’ increases code size (code bloat).

If the function contains loops, recursion, static variables â†’ compiler may ignore inline.

Note

inline is a request to the compiler, not a command. The compiler may ignore it.

âœ… Example Code
#include <iostream>
using namespace std;

// Inline function for square
inline int square(int x) {
    return x * x;
}

int main() {
    int a = 5, b = 10;

    cout << "Square of " << a << " = " << square(a) << endl;
    cout << "Square of " << b << " = " << square(b) << endl;

    return 0;
}



FUNCTION OVERLOADING 

Function Overloading & Polymorphism
ðŸ”¹ Polymorphism (Many Forms)

Definition:
Polymorphism means performing a single action in different forms.
Example: + operator used for addition of numbers or concatenation of strings.

Types of Polymorphism in C++

Compile-time Polymorphism (Static Polymorphism)
Decision is made at compile time.
Achieved using:
Function Overloading âœ…
Operator Overloading

Run-time Polymorphism (Dynamic Polymorphism)
Decision is made at run time.
Achieved using:
Function Overriding (with Virtual Functions)


function Overloading

Definition
Function overloading in C++ means having multiple functions with the same name but with different parameters (type, number, or order).

ðŸ‘‰ Compiler decides which function to call based on the arguments passed.

Purpose
Code becomes clean and readable.
Same function name but used for different tasks depending on input.
Rules for Function Overloading

Function name must be the same.
Parameters must differ by:
Number of parameters
Data type of parameters
Order of parameters
Return type alone cannot distinguish overloaded functions.

âœ… Example Code
#include <iostream>
using namespace std;

class Math {
public:
    // Overloaded functions
    int add(int a, int b) {
        return a + b;
    }

    double add(double a, double b) {
        return a + b;
    }

    int add(int a, int b, int c) {
        return a + b + c;
    }
};

int main() {
    Math m;

    cout << "Sum of 2 int: " << m.add(10, 20) << endl;
    cout << "Sum of 2 double: " << m.add(3.5, 2.5) << endl;
    cout << "Sum of 3 int: " << m.add(1, 2, 3) << endl;

    return 0;
}

ðŸ“Œ Output:
Sum of 2 int: 30
Sum of 2 double: 6
Sum of 3 int: 6


Polymorphism in short 

Polymorphism = one name, many forms.
Compile-time Polymorphism â†’ Function Overloading + Operator Overloading.
Run-time Polymorphism â†’ Function Overriding (with virtual functions).
Function overloading & operator overloading = early binding (compile-time).
Function overriding = late binding (runtime).



some more things indise the opps concetpts 


friend function 
A friend function is a function that is not a member of a class but has the right to access private and protected members of that class.
 Normally, private/protected data ko class ke bahar access nahi kar sakte, lekin friend keyword use karke us function ko allow kar dete hain.



ðŸ”¹ Characteristics of Friend Function
Declared in class using the keyword friend.
It is not a member function (so it doesnâ€™t use scope resolution ::).
It can be a normal function, a friend of one class, or even a friend of multiple classes.
It can access private & protected members directly.
It is called like a normal function (not using object/member access).
 
 here's a simple example ( do not panic if you dont get it )

 #include <iostream>
using namespace std;

class Box {
private:
    int length;

public:
    Box(int l) : length(l) {}

    // Declare friend function
    friend void showLength(Box b);
};

// Friend function definition
void showLength(Box b) {
    // Directly accessing private data
    cout << "Length of box: " << b.length << endl;
}

int main() {
    Box b1(20);

    // Friend function call
    showLength(b1);

    return 0;
}
