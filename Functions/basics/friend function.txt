 

 Notes: Friend Function in C++
Key Points:

Access

A friend function can access private and protected members of a class if it is declared as a friend.
It cannot directly access members without an object.

Caller Object
A friend function has no caller object
It is not invoked using objectName.functionName(), but simply by calling the function.

Membership
It is not a member function of the class.
It should not be defined with the membership label (className::).

Declaration
It is declared inside the class using the friend keyword.

Definition
It must be defined outside the class.

Example:

class A {
    int x;
public:
    A() : x(10) {}
    friend void show(A obj);  // Declaration
};

void show(A obj) {           // Definition outside the class
    cout << obj.x;
}


Important Rule

A friend function is not a part of the class, but it has special permission to access private/protected data of that class.




now question arises that if friend function is not the member function of the class then why it has rights to access the private and public member variables ,,,,
it is against the rules of datasecurity and this could breach data .... 
then why friend function ???

>>>> here the class is using friend keyword which meas that the function can access the private and public member function means , class is giving a permission slip that this function can access/see/use/update my members variable which are protected and private 




 part 2 

 the friend function can become friend to more than one class . 

  
 #include<iostream>
 using namespace std ;

 class B;
 class A {
     private :
     int a ;
     public :
     void setdata(int x ){
        a=x;

     }
    friend void fun(A,B);

 }; 
  class B{
     private :
     int b ;
     public :
     void setdata(int y ){
        b=y;

     }
    friend void fun(A,B);

 }; 

 void fun (A obj,B obj1){
    cout<<"the sum  is "<<obj.a +obj1.b;

 }

 int main (){

    A ob1 ;
    B ob2;
    ob1.setdata(3);
    ob2.setdata(4);
    fun(ob1 ,ob2);

 }


  here the fun function is a friend function which can access the members of both the classes of A and B ,

  and hence it is the first property of friend function ..


  
    ###part 3 - overloading of operator in friend function ....

     lets get a program for better understanding 



#include<iostream>
using namespace std;

class compno {
    int a, b;  // ✅ declare private members

public:
    void setdata(int x, int y){
        a = x;
        b = y;
    }

    void showdata(){
        cout << "a=" << a << " b=" << b << endl;
    }

   friend compno operator+(compno, compno);
};
 compno operator+(compno X,compno Y){
        compno temp;
        temp.a = X.a + Y.a;
        temp.b = X.b+ Y.b;
        return temp;
    }

int main(){
    compno c1, c2, c3;
    c1.setdata(6, 4);
    c2.setdata(6, 5);
    c3 = c1+c2;   //  means c3 = operator+(c1,c2);
    c3.showdata();
    cout << "hello worlld" << endl;
    return 0;
}


  here we can clearly see that how the  overloading of operator+ by friend function ;


    ### part 4 overlafing of unary opearator in friend function ;



class number  {
    int a, b;  // ✅ declare private members

public:
    void setdata(int x, int y){
        a = x;
        b = y;
    }

    void showdata(){
        cout << "a=" << a << " b=" << b << endl;
    }

   friend number  operator+(compno);
};
 number operator+(number X){
        number temp;
        temp.a = -X.a;
        temp.b = -X.b;
        return temp;
    }

int main(){
     number c1, c2, c3;
    c1.setdata(6);
    c2= -c1 // c2= operator-(c1);
    c3.showdata();
    cout << "hello worlld" << endl;
    return 0;
}



## overloading of insertion and extraction operator unsig friend function 



#include<iostream>
using namespace std;

class coomm{
     private:
     int a ,b;
     public:
     void setdata (int x, int y ){
        a=x;
        b=y;
     }
     void showdata()
        {
        cout<<"a="<<a<<"b="<<b ;
        }
     friend ostream& operator<<(ostream& ,coomm);
     friend istream& operator>>(istream& , coomm);



};
 ostream& operator<<(ostream &dout,coomm C)
 {
    dout<<"a="<<C.a<<"b="<<C.b;
     return(dout);
 }
 istream& operator>>(istream &din, coomm D){
    din>>D.a>>D.b;
 }





int main (){
    coomm c1,c2;
    cout<<"enter a complex number ";
    cin>>c1;
    cout<<"you entered";
    cout<<c1;


    return 0;
