 

 Notes: Friend Function in C++
Key Points:

Access

A friend function can access private and protected members of a class if it is declared as a friend.
It cannot directly access members without an object.

Caller Object
A friend function has no caller object
It is not invoked using objectName.functionName(), but simply by calling the function.

Membership
It is not a member function of the class.
It should not be defined with the membership label (className::).

Declaration
It is declared inside the class using the friend keyword.

Definition
It must be defined outside the class.

Example:

class A {
    int x;
public:
    A() : x(10) {}
    friend void show(A obj);  // Declaration
};

void show(A obj) {           // Definition outside the class
    cout << obj.x;
}


Important Rule

A friend function is not a part of the class, but it has special permission to access private/protected data of that class.




now question arises that if friend function is not the member function of the class then why it has rights to access the private and public member variables ,,,,
it is against the rules of datasecurity and this could breach data .... 
then why friend function ???

>>>> here the class is using friend keyword which meas that the function can access the private and public member function means , class is giving a permission slip that this function can access/see/use/update my members variable which are protected and private 




 part 2 

 the friend function can become friend to more than one class . 

  
 #include<iostream>
 using namespace std ;

 class B;
 class A {
     private :
     int a ;
     public :
     void setdata(int x ){
        a=x;

     }
    friend void fun(A,B);

 }; 
  class B{
     private :
     int b ;
     public :
     void setdata(int y ){
        b=y;

     }
    friend void fun(A,B);

 }; 

 void fun (A obj,B obj1){
    cout<<"the sum  is "<<obj.a +obj1.b;

 }

 int main (){

    A ob1 ;
    B ob2;
    ob1.setdata(3);
    ob2.setdata(4);
    fun(ob1 ,ob2);

 }


  here the fun function is a friend function which can access the members of both the classes of A and B ,

  and hence it is the first property of friend function ..


  
    ###part 3 - overloading of operator in friend function ....

     lets get a program for better understanding 



#include<iostream>
using namespace std;

class compno {
    int a, b;  // ✅ declare private members

public:
    void setdata(int x, int y){
        a = x;
        b = y;
    }

    void showdata(){
        cout << "a=" << a << " b=" << b << endl;
    }

   friend compno operator+(compno, compno);
};
 compno operator+(compno X,compno Y){
        compno temp;
        temp.a = X.a + Y.a;
        temp.b = X.b+ Y.b;
        return temp;
    }

int main(){
    compno c1, c2, c3;
    c1.setdata(6, 4);
    c2.setdata(6, 5);
    c3 = c1+c2;   //  means c3 = operator+(c1,c2);
    c3.showdata();
    cout << "hello worlld" << endl;
    return 0;
}


  here we can clearly see that how the  overloading of operator+ by friend function ;


    ### part 4 overlafing of unary opearator in friend function ;



class number  {
    int a, b;  // ✅ declare private members

public:
    void setdata(int x, int y){
        a = x;
        b = y;
    }

    void showdata(){
        cout << "a=" << a << " b=" << b << endl;
    }

   friend number  operator+(compno);
};
 number operator+(number X){
        number temp;
        temp.a = -X.a;
        temp.b = -X.b;
        return temp;
    }

int main(){
     number c1, c2, c3;
    c1.setdata(6);
    c2= -c1 // c2= operator-(c1);
    c3.showdata();
    cout << "hello worlld" << endl;
    return 0;
}



## overloading of insertion and extraction operator unsig friend function 



#include<iostream>
using namespace std;

class coomm{
     private:
     int a ,b;
     public:
     void setdata (int x, int y ){
        a=x;
        b=y;
     }
     void showdata()
        {
        cout<<"a="<<a<<"b="<<b ;
        }
     friend ostream& operator<<(ostream& ,coomm);
     friend istream& operator>>(istream& , coomm);



};
 ostream& operator<<(ostream &dout,coomm C)
 {
    dout<<"a="<<C.a<<"b="<<C.b;
     return(dout);
 }
 istream& operator>>(istream &din, coomm D){
    din>>D.a>>D.b;
 }





int main (){
    coomm c1,c2;
    cout<<"enter a complex number ";
    cin>>c1;
    cout<<"you entered";
    cout<<c1;


    return 0;
}


cin>>c1; // here this  line can be explained as operator>>(cin ,c1)
which means that the  friend function in calling with two arguments that are cin object and c1 object 

similarly ;

    cout<<c1; /// this line can be explained as operator<<(cout,c1)
    
   *we have to write the return type of the caller object which class it belongs to 
   * cout /cin are the objects of ostream/istream class 
   * we cannot change  or modify the code of ostream/istream class so we have to use the refrence of the classes 
   

##5 “A member function of one class can be a friend of another class”
This means that only a specific member function of one class can access the private/protected members of another class, not the entire class
This is useful when you want restricted access — i.e., only one particular function needs special permission, not the whole class.


here is a example code 


#include <iostream>
using namespace std;

class B; // Forward declaration

class A {
private:
    int x;

public:
    A() { x = 10; }

    // Member function of A declared
    void showBdata(B &b);
};

class B {
private:
    int y;

public:
    B() { y = 20; }

    // Allow only A::showBdata() to access private members of B
    friend void A::showBdata(B &b);
};

// Definition of member function
void A::showBdata(B &b) {
    cout << "A's x = " << x << endl;
    cout << "B's y = " << b.y << endl; // Accessing private of B
}

int main() {
    A objA;
    B objB;

    objA.showBdata(objB);

    return 0;
}
 

Explanation:

Normally, class B’s private member y cannot be accessed by any function of class A.
But here we made only A::showBdata() a friend of B.
Now, showBdata() has special permission to directly access B’s private members.
Other functions of class A still do not have access.


There is a BankAccount class where the balance is private.
There is a Loan class, and you want only one specific function, Loan::checkEligibility(BankAccount &acc), to check the balance.
In this case, you don’t need to make the entire Loan class a friend, you can just make one function a friend.





Friend Class → If you make an entire class a friend, then all of its member functions can access the private/protected members of the other class.
Friend Member Function → If you make only a single function a friend, then only that specific function can access the private/protected members of the other class, not the rest.
👉 So, a friend function is used for controlled access, while a friend class is used for full access.