 
 A structure in C++ is a user-defined data type that allows grouping variables of different data types under a single name.

 we can declare structure globally or locally 

 example 

 struct StructureName {
    // members
    datatype variable1;
    datatype variable2;
    ...
};


 now StructureName is a datatype , and can also create variables using StructureName datatype 

 ex StructureName s1;






# how to  initialize a structure ... 

#include <iostream>
#include <cstring>   // for strcpy
using namespace std;

struct book {
    int bookid;
    char title[20];
    float price;
};

int main() {
    // Initialization at the time of declaration
    book b1 = {100, "C++ by Saurabh", 450.0};

    //make Another book structure variable first then initialize accordingly 
    book b2;
    b2.bookid = 101;
    strcpy(b2.title, "C++ made easy");  // copy string into char array
    b2.price = 300.0;



    return 0;
}


encapsulation using structures

encapsualtion refers to the act of combining properties and methods related a particular enitity ..
 here is a basic example of encapsulation ;

 #include <iostream>
#include <cstring>
using namespace std;

struct book {
    int bookid;
    char title[20];
    float price;

    void input() {
        cout << "Enter bookid, title and price: ";
        cin >> bookid >> title >> price;
    }

    void display() {
        cout << "\n" << bookid << " " << title << " " << price;
    }
};

int main() {
    book b1;
    b1.input();
    b1.display();

    return 0;
}



