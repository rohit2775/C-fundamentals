 
  ## ove4rloading of unary opereator  &&&& pre and post increment operator 

    #include <iostream>
using namespace std;

class Complex {
private:
    int a, b;

public:
    void setData(int x, int y) {
        a = x;
        b = y;
    }

    void showData() {
        cout << a << " " << b << endl;
    }

    // Overloading unary operator (-)
    Complex operator-() {
        Complex temp;
        temp.a = -a;
        temp.b = -b;
        return temp;
    }
};

int main() {
    Complex c1, c2;
    c1.setData(3, 4);

    cout << "Original c1: ";
    c1.showData();

    // Using operator function explicitly 
    c2 = c1.operator-();
    cout << "After overloading (explicit call): ";
    c2.showData();

    // OR using shorthand
    c2 = -c1;
    cout << "After overloading (using -c1): ";
    c2.showData();

    return 0;
}

   
    
     ## overloading of pre and post increment 
   
     
        #include <iostream>
using namespace std;

class integer{
private:
    int a;

public:
    void setData(int x) {
        a = x;
    }

    void showData() {
        cout << a  << endl;
    }
     integer operator++ (){
       integer i ;
       i.x=++x;    // pre increment
       return(i);


     }

       integer operator++ (int ){
       integer i ;
       i.x=x++;         // post increment
        return(i);
       

     }

};

int main() {
     
    integer i1, i2 ; 
  
      i2=i1++;


    return 0;
}




in post increment i have used a parameter  to distinguish between pre and post increment 
it will be easy for the compiler to find out the correct function 


  we need to write the operators as it is while calling 
  like 
  12= ++i;  pre 
  12= i++;  post 
    

    the compiler will get it when we writw this 
    
