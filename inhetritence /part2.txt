 ## types of inheritance 

  1. single inheritance
  2. multilevel inheritance
  3. multiple inheritance 
  4. hierarchical inheritance
  5.hybrid inheritance 


############ Single Inheritance

Single inheritance means when one child class (derived class) inherits from only one parent class (base class).
It allows the child class to reuse the properties and methods of the parent class without rewriting them.

ðŸ‘‰ Example idea:

Vehicle is the parent class (it has general properties like wheels, engine).
Car is the child class that inherits from Vehicle and adds its own features (like air conditioning).

ðŸ”¹ Code Example (C++)
#include <iostream>
using namespace std;

// Base class (Parent)
class Vehicle {
public:
    void start() {
        cout << "Vehicle is starting..." << endl;
    }
};

// Derived class (Child)
class Car : public Vehicle {
public:
    void feature() {
        cout << "Car has Air Conditioning." << endl;
    }
};

int main() {
    Car myCar;

    // Inherited function from Vehicle
    myCar.start();

    // Function from Car class
    myCar.feature();

    return 0;
}

ðŸ”¹ Output:
Vehicle is starting...
Car has Air Conditioning.

ðŸ”¹ Real-world analogy:

Itâ€™s like a son inheriting his fatherâ€™s property and also adding his own things.
Thatâ€™s single inheritance â†’ inheriting from only one parent.




one more example for better understanding 


#include <iostream>
using namespace std;

// Base class
class Student {
public:
    string name;
    int roll;

    void getInfo(string n, int r) {
        name = n;
        roll = r;
    }

    void displayInfo() {
        cout << "Name: " << name << endl;
        cout << "Roll: " << roll << endl;
    }
};

// Derived class
class Marks : public Student {
public:
    int score;

    void setScore(int s) {
        score = s;
    }

    void displayScore() {
        cout << "Score: " << score << endl;
    }
};

int main() {
    Marks m1;

    // Using base class function
    m1.getInfo("Rohit", 101);
    m1.displayInfo();

    // Using derived class function
    m1.setScore(95);
    m1.displayScore();

    return 0;
}


here 

Student = parent class (common info like name, roll).
Marks = child class (extra info like score).
Marks inherits everything from Student, so it can use both parent functions and its own functions.


lets get some more examples for better understansings 

example 1 ::

#include <iostream>
using namespace std;

class Student {
public:
    void showStudent() {
        cout << "This is a student" << endl;
    }
};

class Result : public Student {
public:
    void showResult() {
        cout << "Student got 90 marks" << endl;
    }
};

int main() {
    Result r;
    r.showStudent();
    r.showResult();
    return 0;
}



example 2 ::

#include <iostream>
using namespace std;

class Person {
public:
    void displayPerson() {
        cout << "I am a person" << endl;
    }
};

class Employee : public Person {
public:
    void displayEmployee() {
        cout << "I am an employee" << endl;
    }
};

int main() {
    Employee e;
    e.displayPerson();   // from parent
    e.displayEmployee(); // from child
    return 0;
}


example 3 ::


#include <iostream>
using namespace std;

class Vehicle {
public:
    void start() {
        cout << "Vehicle is starting..." << endl;
    }
};

class Car : public Vehicle {
public:
    void showCar() {
        cout << "This is a car" << endl;
    }
};

int main() {
    Car c;
    c.start();    // parent class function
    c.showCar();  // child class function
    return 0;
}\

last example ::::;

#include <iostream>
using namespace std;

// Parent Class (Base)
class BankAccount {
public:
    string accountHolder;
    int accountNumber;
    double balance;

    // Function to set details
    void setDetails(string name, int accNo, double bal) {
        accountHolder = name;
        accountNumber = accNo;
        balance = bal;
    }

    // Show details
    void showDetails() {
        cout << "Account Holder: " << accountHolder << endl;
        cout << "Account Number: " << accountNumber << endl;
        cout << "Balance: $" << balance << endl;
    }
};

// Child Class (Derived)
class SavingsAccount : public BankAccount {
public:
    double interestRate;

    void setInterestRate(double rate) {
        interestRate = rate;
    }

    void calculateInterest() {
        double interest = (balance * interestRate) / 100;
        cout << "Interest Earned: $" << interest << endl;
    }
};

int main() {
    SavingsAccount s1;

    // Parent class function
    s1.setDetails("Rohit", 10101, 5000);

    // Child class function
    s1.setInterestRate(5.0);

    // Show results
    s1.showDetails();
    s1.calculateInterest();

    return 0;
}


the output will be ..
Account Holder: Rohit
Account Number: 10101
Balance: $5000
Interest Earned: $250

  

######## multiple levwl inheritance 

 in this type there are multiple levels of single inheritance .. ..

   let us see a axample for better uderstanding 

   class A{

   };

   class B :public A{

   }:
   
   class C:public B{

   };


   ... here we have to aware about the parent class and the child class of particular classes 
    like parent class of C is B 
    and parent class of B is A;



######### multiple inheritance .....

       if a class have more than one parent class then it is said to be multiple inheritance ..

       like ...

       class a{

       };

       class b{

       };

       class c:public a,public b {
  
       };

       here class c inherits class a and b means  class  c have two parents i.e. class a and class b 




some example codes are .....

        #include <iostream>
using namespace std;

class A {
public:
    void showA() { cout << "This is class A" << endl; }
};

class B {
public:
    void showB() { cout << "This is class B" << endl; }
};

// Class C inherits from A and B
class C : public A, public B {
public:
    void showC() { cout << "This is class C" << endl; }
};

int main() {
    C obj;
    obj.showA();
    obj.showB();
    obj.showC();
    return 0;
}

example 2 

#include <iostream>
using namespace std;

class Engine {
public:
    void engineType() { cout << "Petrol Engine" << endl; }
};

class Wheels {
public:
    void wheelType() { cout << "Alloy Wheels" << endl; }
};

// Car has both Engine and Wheels
class Car : public Engine, public Wheels {
public:
    void display() { cout << "This is a Car" << endl; }
};

int main() {
    Car myCar;
    myCar.engineType();
    myCar.wheelType();
    myCar.display();
    return 0;
}
