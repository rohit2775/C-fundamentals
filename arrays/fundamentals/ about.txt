 
 1.An array is a collection of the same data type.

 2.Example: int arr[5]; stores only integer values.

 3.An array allows us to store multiple values in a single variable.

 4.Array elements are stored in contiguous memory locations.

 5.The first element index is 0, and the last element index is size - 1.




 whenever we do do some  specific tadk using arrays we write the code but the output is not efficient 
 (looks wise ) so  we use <iomanip> headerfile to use various manipulators :: some of them are 

 ðŸ“’ Input/Output Manipulators in C++ (<iomanip> & <ios>)

ðŸ”¹ 1. Field Width & Fill
setw(int n) â†’ sets the output field width (number of characters).
setfill(char c) â†’ fills extra spaces with the given character.

ðŸ”¹ 2. Alignment
left â†’ aligns output to the left.
right â†’ aligns output to the right.
internal â†’ places the sign on the left and aligns the number to the right.

ðŸ”¹ 3. Numbers Base (radix)
dec â†’ decimal (default).
hex â†’ hexadecimal.
oct â†’ octal.
showbase â†’ shows base prefix (0x for hex, 0 for octal).
noshowbase â†’ hides the base prefix.

ðŸ”¹ 4. Floating-point Formatting
setprecision(int n) â†’ sets precision (significant digits or decimal places).
fixed â†’ prints with fixed decimal points.
scientific â†’ prints in scientific notation (exponential form).
defaultfloat â†’ normal floating style (default).
showpoint â†’ forces decimal point (even if number is whole).
noshowpoint â†’ removes unnecessary decimal point.

ðŸ”¹ 5. Boolean Formatting
boolalpha â†’ prints true/false.
noboolalpha â†’ prints 1/0.

ðŸ”¹ 6. Sign Control
showpos â†’ shows + sign for positive numbers.
noshowpos â†’ hides the + sign (default).

ðŸ”¹ 7. Uppercase / Lowercase

uppercase â†’ prints E in scientific notation and A-F in hex in uppercase.
nouppercase â†’ prints them in lowercase (default).

ðŸ”¹ 8. Whitespace Handling (for cin)
skipws â†’ skips leading whitespaces (default).
noskipws â†’ reads whitespace as input.



  // notable point //
   sometimes we code  and finally got results but the code is not efficient according to the BIG-O (n) method 
    
    like if we have to find the max and min of an array then we can go through many processes my first approach was 

   -sort the array 
   -print the first and last value of the sorted array as max and min value 

   

 #include <iostream>
 using namespace std;

 int main (){

     int a[10];
     int temp;
     cout<<"enter  10 numbers for the asrray "<<endl;

     for (int i=0 ; i<=9; i++){

        cin>>a[i];
        
     }  
          for (int i=0; i<=9;i++){

            for(int j=i+1; j<=9;j++){

                 if (a[j]>a[i]){
                    temp = a[i];
                    a[i]=a[j];
                    a[j]=temp;

                 }
            }
          }

        cout<<"the maximum  of the array is:"<<a[0]<<endl;

        cout<<"the minimum  of the array is:"<<a[9]<<endl;


 

    return 0;


 }


  here this will correctly give the results  but this method is O(n2)
  in essence two major steps arer needed for solving this problem but in other hand 




  look at this code 



 #include <iostream>
using namespace std;

int main() {
    int a[10];
    cout << "Enter 10 numbers for the array: " << endl;

    for (int i = 0; i < 10; i++) {
        cin >> a[i];
    }

    int maxVal = a[0];
    int minVal = a[0];

    for (int i = 1; i < 10; i++) {
        if (a[i] > maxVal) {
            maxVal = a[i];
        }
        if (a[i] < minVal) {
            minVal = a[i];
        }
    }

    cout << "The maximum of the array is: " << maxVal << endl;
    cout << "The minimum of the array is: " << minVal << endl;

    return 0;
}



 this is O(n)
 (in essence ) only one major thing is needed for the  logic 


  

 